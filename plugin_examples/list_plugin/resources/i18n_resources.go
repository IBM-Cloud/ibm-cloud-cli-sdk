// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package resources generated by go-bindata.
// sources:
// i18n/resources/all.en_US.json
// i18n/resources/all.zh_Hans.json
package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _i18nResourcesAllEn_usJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x94\x31\x6f\xdb\x3c\x10\x86\x77\xfd\x8a\x83\x17\x7f\x1f\x10\xa8\x7b\xb6\xc4\x68\x01\x01\x4d\x2b\xa4\xf5\xd4\x76\x60\xc4\x33\x43\x80\x3a\xca\xe4\x31\x80\xa1\xea\xbf\x17\x12\x6d\xc7\x45\x48\xdb\xb1\x87\x8e\xc6\x7b\xef\xc3\x87\x14\xcd\x1f\x05\x40\x5f\x00\x00\xcc\xb4\x9c\xdd\xc2\x6c\x61\x6c\x90\x9f\x6c\x20\xb9\x81\xbb\xae\x33\xba\x11\xac\x2d\x79\x80\xbe\x2f\x97\x1e\xe5\x30\x7c\xe8\xfb\xf2\xb3\x6e\x35\x0f\x03\x04\x8f\x72\x76\x13\x01\xec\x04\x79\x33\x8d\x5f\x4a\x2a\x00\x86\x9b\x37\x4a\x96\x58\x68\x42\x17\xab\x0f\xd8\x5a\xb7\x79\x05\xc4\xdf\x3b\xcc\x38\x51\xd5\x0b\x1b\x88\x63\x5c\xd5\xbb\xa8\x0e\x4f\x46\x37\x50\xd5\x1e\x1e\x71\x1d\xd0\x33\xca\xdf\x7d\x5f\xde\x8f\x8e\xfb\x0e\x2c\x8f\x6c\xe9\x1f\x98\xa4\x8f\xc4\xa1\xe0\xbc\xe6\x36\x4d\x56\xab\x56\x28\xcc\x14\x63\x96\xae\x91\x67\x41\x0d\xfa\x5c\x75\x9f\x27\xeb\xf1\x68\xe0\xbf\x87\xfb\xff\x33\x80\xc3\x89\x24\xe2\x8b\x68\x73\xde\x53\x94\x2e\x59\xb8\xab\x2b\x40\x92\x9d\xd5\xc4\xe0\x91\xcb\xf1\x5c\x61\xde\xf7\xe5\xc2\xb6\xad\x20\x39\x0c\x73\x60\x3b\x46\x20\x68\x3f\x5a\xe6\xd6\xba\x82\x98\x53\xf4\x9d\x68\x10\x58\x38\x85\x8c\x32\x87\x8b\xf9\x48\xb4\x4e\x81\x20\x09\x22\x36\x8f\xa8\x5e\x4d\xce\x28\x33\x18\xab\x14\x4a\xd0\x94\x83\x1a\xab\xc6\x34\xeb\xf6\x0e\x44\x52\xa2\x36\x82\x32\xf0\x29\x4a\x96\x1e\x6d\xe0\xec\x1d\xde\x86\xc9\xe2\x37\x74\x2f\xba\x41\xf8\xba\x5a\xa1\xd3\xa4\x32\x88\x37\x63\xc7\x60\x1e\xa6\x1d\xef\x1f\x88\x33\x1e\xd5\x73\x9a\xe9\x25\x59\x70\xee\xef\x13\xb3\x6c\x2d\xe4\xce\x6b\x1b\x26\x8b\x4b\x12\x4f\x06\xc7\x8f\xb8\x0e\xe8\x36\x20\xba\xce\x4f\x37\xcb\xef\x76\x60\x57\xc0\xcf\xbb\xbb\x19\xaf\xdb\xed\xcf\xdc\x17\xbd\x18\x77\x96\x5c\xf3\xfa\xae\x5f\x65\x75\x9a\x73\x42\xc7\x21\x3b\x8d\x2f\x78\x40\x9a\x43\xf0\x42\xe1\xb4\xd9\x75\xb0\x2c\x2e\x55\xbc\x86\x7d\xae\x76\xc4\xfd\x0d\xb1\x4e\xbd\x4b\xef\x08\x23\xa9\xf1\x1d\x3d\xc3\x01\x16\x2c\x99\x0d\x68\x82\x8f\xa4\x8c\xf6\xcf\x99\x95\x4f\xd6\xc6\xc5\x8a\x5f\xc5\x9f\x00\x00\x00\xff\xff\x8a\x3c\x21\x22\x22\x09\x00\x00")

func i18nResourcesAllEn_usJsonBytes() ([]byte, error) {
	return bindataRead(
		_i18nResourcesAllEn_usJson,
		"i18n/resources/all.en_US.json",
	)
}

func i18nResourcesAllEn_usJson() (*asset, error) {
	bytes, err := i18nResourcesAllEn_usJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "i18n/resources/all.en_US.json", size: 2338, mode: os.FileMode(420), modTime: time.Unix(1665005508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _i18nResourcesAllZh_hansJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x95\xcd\x4e\x1b\x49\x10\xc7\xef\x7e\x8a\x92\x2f\xec\x4a\xc8\x7b\xe7\x06\x48\x2b\x59\x5a\x76\x2d\x10\xa7\xdd\x3d\x34\x9e\x66\x76\xa4\x71\xb7\x99\xe9\x41\x42\xb3\x96\xcc\x87\xf9\x26\x20\x62\x87\x00\x76\x04\x51\x10\x26\x09\x36\xe4\xcb\xc1\xc6\xf0\x2e\xc4\x3d\x63\x9f\x78\x85\x68\xdc\xb1\x71\xc8\x34\x06\x85\xe3\xa8\xea\xff\x9f\x5f\x55\x57\x77\xfd\x1d\x00\xb0\x03\x00\x00\x41\x4d\x09\xf6\x41\x70\x50\xa7\x96\xf2\x3b\xb5\x88\x32\x05\xfd\xf1\xb8\xae\x45\x11\xd3\x28\x31\x01\x6c\x3b\x34\x6a\x62\x25\x91\xf8\xcd\xb6\x43\x7f\x68\x31\x8d\x25\x12\x60\x99\x58\x09\xf6\x0a\x03\x66\x20\x62\xea\xcd\xf4\xdb\x4e\xbc\x9c\x76\xd3\x79\x37\xbf\xc2\xcb\xeb\x12\x27\x5e\x7a\x57\xab\x5e\xba\xe9\x7c\x30\x00\x90\xe8\xfd\x81\x8b\x12\x86\x34\x82\x0d\x41\x32\x84\x63\xd4\x98\xba\x71\x11\xdf\x2d\x2f\x2f\x23\x1c\x19\xa4\x16\x61\x22\x1c\x8e\xb4\x42\x11\x6b\x4c\xd7\xa2\x10\x8e\x98\x30\x8c\x27\x2c\x6c\x32\xac\xfc\x6f\xdb\xa1\x01\x0f\xb4\xad\x81\x51\x79\x5d\xbc\x70\xc6\xb7\xf3\x3f\x47\xc1\x53\x6f\x79\xea\x34\x1c\xe1\xd9\x13\x9e\x4b\x7a\xb5\xd7\x8b\x25\xe7\x74\xc6\x87\xa4\x5b\x5f\x0c\x8c\x98\x9c\x75\x71\x97\x57\xca\xfe\xca\x70\x0c\xa9\x58\xa2\x6b\x64\xb2\x7c\x76\x5d\xa2\x23\x26\x43\x24\x8a\x4d\x69\x7f\x5e\xd4\x2e\x56\xfc\xb5\xa2\x41\xf0\xcb\xd0\xc0\xaf\x32\xf5\x7c\x8a\x1f\x3f\x87\xeb\xf3\xc5\xa1\x81\xeb\xf3\x25\x7f\x9b\x3f\x51\x4c\x46\xce\x37\xd6\xdc\xc3\x13\x89\x8c\x42\x7f\x24\x0c\x98\x28\x71\xaa\x11\x06\x26\x66\x21\xef\xa4\xa1\xc7\xb6\x43\x83\x34\x16\x43\x44\x49\x24\x7a\x80\x51\x2f\x04\x88\xb4\x53\x43\x92\xbf\x39\xd9\xd7\xf5\xc2\x85\x5b\x2d\xd4\x2a\x95\x5a\x35\xd3\xb4\x77\xdf\x14\xdd\x99\xb3\x2f\xc9\x99\x7a\xb1\x24\x4e\xee\x2a\x99\xed\xfc\xc1\x55\x32\xe7\xe4\x0e\x84\xae\x9d\x2c\x25\x36\xe3\x28\x8a\x81\x21\x43\xc5\x0c\x2b\x32\x5e\x11\xf7\x90\xa9\xa1\x02\x22\x0a\x20\xa1\xbc\x83\xbc\x91\x5c\x72\x56\x8e\xdc\xdd\x82\xb3\xb7\xe0\x1e\x95\x1b\x5b\x1f\xba\x42\xfb\x4a\x64\xe8\x0c\x74\xaa\xaa\x58\x01\x8d\xc8\xb0\x75\xaa\x7a\x51\x39\xa3\xbb\x5d\xe1\xd5\x4c\x27\xd7\x6d\x97\x76\x86\x3f\x46\x44\x47\x44\x36\x2a\x07\x5b\x8d\x57\x1b\xfe\xb2\x61\x6a\x31\xe9\x84\xd7\x4b\x45\x37\x7d\xea\x2f\x1c\xc1\xc6\xa4\x16\xc5\xf0\xd7\xf8\x38\x36\x34\xa2\x4a\x4b\x5b\xe3\xcb\xfb\xb5\xf2\x21\x7f\x3a\x7d\xa7\x91\x09\xcd\x72\xdb\x6f\xc8\x3d\x1e\x5e\xe1\x2d\xd1\x75\x79\x4e\x46\x18\x62\xb2\xab\xe5\x2e\x7f\x72\x92\x32\x5a\x86\x98\x25\xeb\xd7\x5d\xc2\x51\x82\xc6\x74\xec\xcd\xc2\x84\x85\x8d\x29\x40\xf1\xb8\xd9\x9c\x5f\xb3\x55\x3f\x1d\x07\xf6\x5f\xeb\x06\x88\xa1\xee\xfb\x47\x76\xa6\xce\xd6\x9e\xf3\x3e\x53\x7f\x52\xe2\xeb\xcf\x3a\xc7\xb4\xf6\xf9\xd8\xdd\x99\xeb\x5c\x43\x7c\x73\x55\x34\xca\x33\xbb\x17\x5a\xf4\x66\x05\x3d\x26\x53\x73\x9d\x74\x67\x30\x30\x33\x34\x3c\x89\x3b\x30\x7a\xc0\x32\x91\x8a\x9b\xed\x9a\xb0\x28\x43\x8f\xc6\x25\xa0\xdc\x9d\x39\x31\x2b\xce\x6c\x8a\xcf\x7f\xe4\x9b\xab\x8d\xd4\x5a\xe3\x65\xee\x01\xb0\x02\xf0\x7b\x2c\x6a\xa8\x0f\x82\xaa\xcc\xb9\x95\x05\xd1\xac\x4e\x9c\xda\xe5\xbe\x33\x5d\xfc\xc6\x12\xf8\x37\xf0\x35\x00\x00\xff\xff\xb1\x15\x45\xfe\xcb\x08\x00\x00")

func i18nResourcesAllZh_hansJsonBytes() ([]byte, error) {
	return bindataRead(
		_i18nResourcesAllZh_hansJson,
		"i18n/resources/all.zh_Hans.json",
	)
}

func i18nResourcesAllZh_hansJson() (*asset, error) {
	bytes, err := i18nResourcesAllZh_hansJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "i18n/resources/all.zh_Hans.json", size: 2251, mode: os.FileMode(420), modTime: time.Unix(1665005508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"i18n/resources/all.en_US.json":   i18nResourcesAllEn_usJson,
	"i18n/resources/all.zh_Hans.json": i18nResourcesAllZh_hansJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"i18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"all.en_US.json":   &bintree{i18nResourcesAllEn_usJson, map[string]*bintree{}},
			"all.zh_Hans.json": &bintree{i18nResourcesAllZh_hansJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
